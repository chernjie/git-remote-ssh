#!/usr/bin/env bash

COLOR_RED()   { echo -en "\033[31m"; }
COLOR_GREEN() { echo -en "\033[32m"; }
COLOR_YELLOW(){ echo -en "\033[33m"; }
COLOR_BLUE()  { echo -en "\033[34m"; }
COLOR_RESET() { echo -en "\033[0m";  }

function set_remote()
{
	remote=$1
	if [ $(git remote | grep -c ^$remote$) -eq 0 ]
	then
		echo "Remote $remote does not exist in your git config"
		exit 1
	fi
}

# Check file for PHP syntax errors
# takes a list of filenames
function php_lint()
{
	local error_count=()
	for i
	do
		# check if file exists
		# check if file ends with ".php"
		if [ -f "$i" ] && [ "${i: -4}" == ".php" ]
		then
			php -l "$i" > /dev/null
			[ $? -gt 0 ] && error_count[${#error_count[@]}]="$i"
		fi
	done

	# syntax check fails, force exit
	[ ${#error_count[@]} -gt 0 ] &&
		COLOR_RED &&
		echo "Error: ${#error_count[@]} PHP syntax error found" &&
		echo "${error_count[@]}" | tr " " '\n' &&
		COLOR_RESET &&
		exit 255

	echo -n
}

function scp_and_stage
{
	set_remote $1
	shift

	local refhead="$(git rev-parse --quiet --verify $1)"
	if [ -n "$refhead" ]
	then
		shift
		[ $(git branch --contains "$refhead" | grep -c '\*') -eq 0 ] &&
			_error "refhead provided is not part of current branch"
	fi

	if [ $# -ge 1 ]
	then
		list=$(git ls-files "$@")" "$(git ls-files -o "$@")
		# list=$(echo "$@" | tr ' ' "\\n")
	elif [ -n "$refhead" ]
	then
		git diff --stat $refhead
		list=$(git diff $refhead --name-only)
	else
		git diff
		list=$(git diff --name-only)
	fi

	deleted=$(for i in $list; do [ -f $i ] || echo $i; done)
	   list=$(for i in $list; do [ -f $i ] && echo $i; done)

	if [ -n "$list" ]
	then
		_TMP=${0///}
		echo "$list" > $_TMP &&
		php_lint $list &&
		echo Pushing to $remote \($(git config remote.$remote.url)\) &&
		(which dos2unix > /dev/null && dos2unix $list || echo > /dev/null) &&
		rsync -rlDv --files-from=$_TMP ./ "$(git config remote.$remote.url)/" &&
		git add $list &&
		rm $_TMP
	fi

	deleted=$(for i in $deleted; do echo $(git config remote.$remote.url | cut -d: -f2)/$i; done)

	[ -n "$deleted" ] &&
	COLOR_RED &&
	echo Deleted files &&
	ssh $(git config remote.$remote.url | cut -d: -f1) -t rm $deleted &&
	echo "$deleted"
	COLOR_RESET
}

function reverse_scp()
{
	set_remote $1
	shift

	local _TMP=${0///}
	echo $@ > $_TMP &&
		rsync -rlDv --files-from=$_TMP "$(git config remote.$remote.url)/" ./ &&
		rm $_TMP
}

function _usage()
{
	echo "Usage:
	git goth -h|help|?
	git goth scp|stage <remote> [ref|file..] # scp and stage your files to specified remote
	git goth scp|stage <remote> [<ref>]      # show diff relative to <ref> and upload unstaged files to <remote>"

	case $1 in
		-v|verbose|--verbose) grep -A100 '^#* OPTIONS #*$' $0;;
	esac
	exit
}

function _error()
{
	[ $# -eq 0 ] && _usage && exit 0

	echo
	echo ERROR: "$@"
	echo
	exit 1
}

### OPTIONS ###
case $(basename $0) in
	git-scp)
		case $1 in
			''|-h|?|help|--help) shift; _usage $@;;
			*)                   scp_and_stage $@;;
		esac
	;;
	git-rscp)                  reverse_scp $@;;
esac
