#!/usr/bin/env bash
#
# Copyright (c) 2016 Dennis Kaarsemaker <dennis@kaarsemaker.net>
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# 'Software'), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

USAGE="[ssh options] <remote> [<command>]"
LONG_USAGE="$(git config --get-regexp remote.*.url | sed -e s/remote.// -e s/.url// | column -t)"
. $(git --exec-path)/git-sh-setup

declare -a ssh_opts
declare -a ssh_args

expect_more() {
  opt="${1:1}"
  while [ -n "$opt" ]; do
    cur="${opt:0:1}"
    opt="${opt:1}"
    [[ "$cur" =~ [tT] ]] && seen_tty=yes
    if [[ "$cur" =~ [bcDeFIiLlmOopRSWw] ]]; then
      test -z "$opt"
      return
    fi
  done
  return 1
}

while [ $# -gt 0 ]; do
  case "$1" in
    -*)
      expect_more "$1" && { ssh_opts[${#ssh_opts[@]}]="$1"; shift; }
      ssh_opts[${#ssh_opts[@]}]="$1"; shift
      ;;
    *)
      if [ -z "$remote" ]; then
        remote="$1";
        shift
      else
        while [ $# -gt 0 ]; do ssh_args[${#ssh_args[@]}]="$1"; shift; done
      fi
      ;;
  esac
done

test -z "$remote" && usage
remote_url=$(git config remote."$remote".url)
case "$remote_url" in
  '')
    die "Could not find url for $remote"
    ;;
  file://*|https://*|https://*|git://*)
    die "Protocol not supported: ${remote_url%%://}"
    ;;
esac

case "$remote_url" in
  git+ssh://*|ssh://*)
    url="${remote_url#*://}"
    host="${url%%/*}"
    path="${url#*/}"
    ;;
  *)
    host="${remote_url%%:*}"
    path="${remote_url#*:}"
    ;;
esac

if [ ${#ssh_args[@]} -eq 0 ]; then
  if [ "$seen_tty" != yes ]; then
    ssh_opts[${#ssh_opts[@]}]="-t"
  fi
  ssh_args[0]="${SHELL:-/bin/bash}"
  ssh_args[1]="-l"
fi

exec ssh "$host" "${ssh_opts[@]}" "cd \"$path\" && $(git rev-parse --sq-quote "${ssh_args[@]}")"
